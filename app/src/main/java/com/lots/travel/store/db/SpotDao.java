package com.lots.travel.store.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPOT".
*/
public class SpotDao extends AbstractDao<Spot, Long> {

    public static final String TABLENAME = "SPOT";

    /**
     * Properties of entity Spot.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ViewId = new Property(0, Long.class, "viewId", true, "_id");
        public final static Property PxHot = new Property(1, int.class, "pxHot", false, "PX_HOT");
        public final static Property Px = new Property(2, int.class, "px", false, "PX");
        public final static Property Recommend = new Property(3, int.class, "recommend", false, "RECOMMEND");
        public final static Property CityId = new Property(4, int.class, "cityId", false, "CITY_ID");
        public final static Property ViewImg = new Property(5, String.class, "viewImg", false, "VIEW_IMG");
        public final static Property CountryId = new Property(6, int.class, "countryId", false, "COUNTRY_ID");
        public final static Property Score = new Property(7, String.class, "score", false, "SCORE");
        public final static Property CityName = new Property(8, String.class, "cityName", false, "CITY_NAME");
        public final static Property YwTotle = new Property(9, String.class, "ywTotle", false, "YW_TOTLE");
        public final static Property YwTime = new Property(10, String.class, "ywTime", false, "YW_TIME");
        public final static Property GpsGoogle = new Property(11, String.class, "gpsGoogle", false, "GPS_GOOGLE");
        public final static Property PercentPeople = new Property(12, String.class, "percentPeople", false, "PERCENT_PEOPLE");
        public final static Property ViewType = new Property(13, int.class, "viewType", false, "VIEW_TYPE");
        public final static Property Name = new Property(14, String.class, "name", false, "NAME");
        public final static Property Viewurl = new Property(15, String.class, "viewurl", false, "VIEWURL");
        public final static Property ShortDesc = new Property(16, String.class, "shortDesc", false, "SHORT_DESC");
        public final static Property CountryName = new Property(17, String.class, "countryName", false, "COUNTRY_NAME");
        public final static Property Status = new Property(18, int.class, "status", false, "STATUS");
        public final static Property SpotName = new Property(19, String.class, "spotName", false, "SPOT_NAME");
        public final static Property ScheduleId = new Property(20, String.class, "scheduleId", false, "SCHEDULE_ID");
    }


    public SpotDao(DaoConfig config) {
        super(config);
    }
    
    public SpotDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPOT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: viewId
                "\"PX_HOT\" INTEGER NOT NULL ," + // 1: pxHot
                "\"PX\" INTEGER NOT NULL ," + // 2: px
                "\"RECOMMEND\" INTEGER NOT NULL ," + // 3: recommend
                "\"CITY_ID\" INTEGER NOT NULL ," + // 4: cityId
                "\"VIEW_IMG\" TEXT," + // 5: viewImg
                "\"COUNTRY_ID\" INTEGER NOT NULL ," + // 6: countryId
                "\"SCORE\" TEXT," + // 7: score
                "\"CITY_NAME\" TEXT," + // 8: cityName
                "\"YW_TOTLE\" TEXT," + // 9: ywTotle
                "\"YW_TIME\" TEXT," + // 10: ywTime
                "\"GPS_GOOGLE\" TEXT," + // 11: gpsGoogle
                "\"PERCENT_PEOPLE\" TEXT," + // 12: percentPeople
                "\"VIEW_TYPE\" INTEGER NOT NULL ," + // 13: viewType
                "\"NAME\" TEXT," + // 14: name
                "\"VIEWURL\" TEXT," + // 15: viewurl
                "\"SHORT_DESC\" TEXT," + // 16: shortDesc
                "\"COUNTRY_NAME\" TEXT," + // 17: countryName
                "\"STATUS\" INTEGER NOT NULL ," + // 18: status
                "\"SPOT_NAME\" TEXT," + // 19: spotName
                "\"SCHEDULE_ID\" TEXT);"); // 20: scheduleId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPOT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Spot entity) {
        stmt.clearBindings();
 
        Long viewId = entity.getViewId();
        if (viewId != null) {
            stmt.bindLong(1, viewId);
        }
        stmt.bindLong(2, entity.getPxHot());
        stmt.bindLong(3, entity.getPx());
        stmt.bindLong(4, entity.getRecommend());
        stmt.bindLong(5, entity.getCityId());
 
        String viewImg = entity.getViewImg();
        if (viewImg != null) {
            stmt.bindString(6, viewImg);
        }
        stmt.bindLong(7, entity.getCountryId());
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(8, score);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(9, cityName);
        }
 
        String ywTotle = entity.getYwTotle();
        if (ywTotle != null) {
            stmt.bindString(10, ywTotle);
        }
 
        String ywTime = entity.getYwTime();
        if (ywTime != null) {
            stmt.bindString(11, ywTime);
        }
 
        String gpsGoogle = entity.getGpsGoogle();
        if (gpsGoogle != null) {
            stmt.bindString(12, gpsGoogle);
        }
 
        String percentPeople = entity.getPercentPeople();
        if (percentPeople != null) {
            stmt.bindString(13, percentPeople);
        }
        stmt.bindLong(14, entity.getViewType());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(15, name);
        }
 
        String viewurl = entity.getViewurl();
        if (viewurl != null) {
            stmt.bindString(16, viewurl);
        }
 
        String shortDesc = entity.getShortDesc();
        if (shortDesc != null) {
            stmt.bindString(17, shortDesc);
        }
 
        String countryName = entity.getCountryName();
        if (countryName != null) {
            stmt.bindString(18, countryName);
        }
        stmt.bindLong(19, entity.getStatus());
 
        String spotName = entity.getSpotName();
        if (spotName != null) {
            stmt.bindString(20, spotName);
        }
 
        String scheduleId = entity.getScheduleId();
        if (scheduleId != null) {
            stmt.bindString(21, scheduleId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Spot entity) {
        stmt.clearBindings();
 
        Long viewId = entity.getViewId();
        if (viewId != null) {
            stmt.bindLong(1, viewId);
        }
        stmt.bindLong(2, entity.getPxHot());
        stmt.bindLong(3, entity.getPx());
        stmt.bindLong(4, entity.getRecommend());
        stmt.bindLong(5, entity.getCityId());
 
        String viewImg = entity.getViewImg();
        if (viewImg != null) {
            stmt.bindString(6, viewImg);
        }
        stmt.bindLong(7, entity.getCountryId());
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(8, score);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(9, cityName);
        }
 
        String ywTotle = entity.getYwTotle();
        if (ywTotle != null) {
            stmt.bindString(10, ywTotle);
        }
 
        String ywTime = entity.getYwTime();
        if (ywTime != null) {
            stmt.bindString(11, ywTime);
        }
 
        String gpsGoogle = entity.getGpsGoogle();
        if (gpsGoogle != null) {
            stmt.bindString(12, gpsGoogle);
        }
 
        String percentPeople = entity.getPercentPeople();
        if (percentPeople != null) {
            stmt.bindString(13, percentPeople);
        }
        stmt.bindLong(14, entity.getViewType());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(15, name);
        }
 
        String viewurl = entity.getViewurl();
        if (viewurl != null) {
            stmt.bindString(16, viewurl);
        }
 
        String shortDesc = entity.getShortDesc();
        if (shortDesc != null) {
            stmt.bindString(17, shortDesc);
        }
 
        String countryName = entity.getCountryName();
        if (countryName != null) {
            stmt.bindString(18, countryName);
        }
        stmt.bindLong(19, entity.getStatus());
 
        String spotName = entity.getSpotName();
        if (spotName != null) {
            stmt.bindString(20, spotName);
        }
 
        String scheduleId = entity.getScheduleId();
        if (scheduleId != null) {
            stmt.bindString(21, scheduleId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Spot readEntity(Cursor cursor, int offset) {
        Spot entity = new Spot( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // viewId
            cursor.getInt(offset + 1), // pxHot
            cursor.getInt(offset + 2), // px
            cursor.getInt(offset + 3), // recommend
            cursor.getInt(offset + 4), // cityId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // viewImg
            cursor.getInt(offset + 6), // countryId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // score
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cityName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ywTotle
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ywTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // gpsGoogle
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // percentPeople
            cursor.getInt(offset + 13), // viewType
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // name
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // viewurl
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // shortDesc
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // countryName
            cursor.getInt(offset + 18), // status
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // spotName
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // scheduleId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Spot entity, int offset) {
        entity.setViewId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPxHot(cursor.getInt(offset + 1));
        entity.setPx(cursor.getInt(offset + 2));
        entity.setRecommend(cursor.getInt(offset + 3));
        entity.setCityId(cursor.getInt(offset + 4));
        entity.setViewImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCountryId(cursor.getInt(offset + 6));
        entity.setScore(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCityName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setYwTotle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setYwTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGpsGoogle(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPercentPeople(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setViewType(cursor.getInt(offset + 13));
        entity.setName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setViewurl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setShortDesc(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCountryName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setStatus(cursor.getInt(offset + 18));
        entity.setSpotName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setScheduleId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Spot entity, long rowId) {
        entity.setViewId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Spot entity) {
        if(entity != null) {
            return entity.getViewId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Spot entity) {
        return entity.getViewId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
