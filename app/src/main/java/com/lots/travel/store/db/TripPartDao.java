package com.lots.travel.store.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRIP_PART".
*/
public class TripPartDao extends AbstractDao<TripPart, Long> {

    public static final String TABLENAME = "TRIP_PART";

    /**
     * Properties of entity TripPart.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ScheduleId = new Property(1, String.class, "scheduleId", false, "SCHEDULE_ID");
        public final static Property CityId = new Property(2, String.class, "cityId", false, "CITY_ID");
        public final static Property HotelIn = new Property(3, String.class, "hotelIn", false, "HOTEL_IN");
        public final static Property Day = new Property(4, String.class, "day", false, "DAY");
        public final static Property Style = new Property(5, String.class, "style", false, "STYLE");
        public final static Property DataKey = new Property(6, String.class, "dataKey", false, "DATA_KEY");
        public final static Property TripVideo = new Property(7, String.class, "tripVideo", false, "TRIP_VIDEO");
        public final static Property TripVideoImg = new Property(8, String.class, "tripVideoImg", false, "TRIP_VIDEO_IMG");
        public final static Property TripImgs = new Property(9, String.class, "tripImgs", false, "TRIP_IMGS");
        public final static Property TripSound = new Property(10, String.class, "tripSound", false, "TRIP_SOUND");
        public final static Property TripSoundLen = new Property(11, String.class, "tripSoundLen", false, "TRIP_SOUND_LEN");
        public final static Property TripDesc = new Property(12, String.class, "tripDesc", false, "TRIP_DESC");
        public final static Property Transport = new Property(13, String.class, "transport", false, "TRANSPORT");
        public final static Property Distance = new Property(14, String.class, "distance", false, "DISTANCE");
        public final static Property UseHour = new Property(15, String.class, "useHour", false, "USE_HOUR");
        public final static Property UseMinute = new Property(16, String.class, "useMinute", false, "USE_MINUTE");
    }


    public TripPartDao(DaoConfig config) {
        super(config);
    }
    
    public TripPartDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRIP_PART\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SCHEDULE_ID\" TEXT," + // 1: scheduleId
                "\"CITY_ID\" TEXT," + // 2: cityId
                "\"HOTEL_IN\" TEXT," + // 3: hotelIn
                "\"DAY\" TEXT," + // 4: day
                "\"STYLE\" TEXT," + // 5: style
                "\"DATA_KEY\" TEXT," + // 6: dataKey
                "\"TRIP_VIDEO\" TEXT," + // 7: tripVideo
                "\"TRIP_VIDEO_IMG\" TEXT," + // 8: tripVideoImg
                "\"TRIP_IMGS\" TEXT," + // 9: tripImgs
                "\"TRIP_SOUND\" TEXT," + // 10: tripSound
                "\"TRIP_SOUND_LEN\" TEXT," + // 11: tripSoundLen
                "\"TRIP_DESC\" TEXT," + // 12: tripDesc
                "\"TRANSPORT\" TEXT," + // 13: transport
                "\"DISTANCE\" TEXT," + // 14: distance
                "\"USE_HOUR\" TEXT," + // 15: useHour
                "\"USE_MINUTE\" TEXT);"); // 16: useMinute
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRIP_PART\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TripPart entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String scheduleId = entity.getScheduleId();
        if (scheduleId != null) {
            stmt.bindString(2, scheduleId);
        }
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(3, cityId);
        }
 
        String hotelIn = entity.getHotelIn();
        if (hotelIn != null) {
            stmt.bindString(4, hotelIn);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(5, day);
        }
 
        String style = entity.getStyle();
        if (style != null) {
            stmt.bindString(6, style);
        }
 
        String dataKey = entity.getDataKey();
        if (dataKey != null) {
            stmt.bindString(7, dataKey);
        }
 
        String tripVideo = entity.getTripVideo();
        if (tripVideo != null) {
            stmt.bindString(8, tripVideo);
        }
 
        String tripVideoImg = entity.getTripVideoImg();
        if (tripVideoImg != null) {
            stmt.bindString(9, tripVideoImg);
        }
 
        String tripImgs = entity.getTripImgs();
        if (tripImgs != null) {
            stmt.bindString(10, tripImgs);
        }
 
        String tripSound = entity.getTripSound();
        if (tripSound != null) {
            stmt.bindString(11, tripSound);
        }
 
        String tripSoundLen = entity.getTripSoundLen();
        if (tripSoundLen != null) {
            stmt.bindString(12, tripSoundLen);
        }
 
        String tripDesc = entity.getTripDesc();
        if (tripDesc != null) {
            stmt.bindString(13, tripDesc);
        }
 
        String transport = entity.getTransport();
        if (transport != null) {
            stmt.bindString(14, transport);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(15, distance);
        }
 
        String useHour = entity.getUseHour();
        if (useHour != null) {
            stmt.bindString(16, useHour);
        }
 
        String useMinute = entity.getUseMinute();
        if (useMinute != null) {
            stmt.bindString(17, useMinute);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TripPart entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String scheduleId = entity.getScheduleId();
        if (scheduleId != null) {
            stmt.bindString(2, scheduleId);
        }
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(3, cityId);
        }
 
        String hotelIn = entity.getHotelIn();
        if (hotelIn != null) {
            stmt.bindString(4, hotelIn);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(5, day);
        }
 
        String style = entity.getStyle();
        if (style != null) {
            stmt.bindString(6, style);
        }
 
        String dataKey = entity.getDataKey();
        if (dataKey != null) {
            stmt.bindString(7, dataKey);
        }
 
        String tripVideo = entity.getTripVideo();
        if (tripVideo != null) {
            stmt.bindString(8, tripVideo);
        }
 
        String tripVideoImg = entity.getTripVideoImg();
        if (tripVideoImg != null) {
            stmt.bindString(9, tripVideoImg);
        }
 
        String tripImgs = entity.getTripImgs();
        if (tripImgs != null) {
            stmt.bindString(10, tripImgs);
        }
 
        String tripSound = entity.getTripSound();
        if (tripSound != null) {
            stmt.bindString(11, tripSound);
        }
 
        String tripSoundLen = entity.getTripSoundLen();
        if (tripSoundLen != null) {
            stmt.bindString(12, tripSoundLen);
        }
 
        String tripDesc = entity.getTripDesc();
        if (tripDesc != null) {
            stmt.bindString(13, tripDesc);
        }
 
        String transport = entity.getTransport();
        if (transport != null) {
            stmt.bindString(14, transport);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(15, distance);
        }
 
        String useHour = entity.getUseHour();
        if (useHour != null) {
            stmt.bindString(16, useHour);
        }
 
        String useMinute = entity.getUseMinute();
        if (useMinute != null) {
            stmt.bindString(17, useMinute);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TripPart readEntity(Cursor cursor, int offset) {
        TripPart entity = new TripPart( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // scheduleId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cityId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hotelIn
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // day
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // style
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dataKey
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // tripVideo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tripVideoImg
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // tripImgs
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // tripSound
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // tripSoundLen
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // tripDesc
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // transport
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // distance
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // useHour
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // useMinute
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TripPart entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setScheduleId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCityId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHotelIn(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDay(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStyle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDataKey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTripVideo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTripVideoImg(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTripImgs(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTripSound(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTripSoundLen(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTripDesc(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTransport(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDistance(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUseHour(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUseMinute(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TripPart entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TripPart entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TripPart entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
