package com.lots.travel.store.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOOD".
*/
public class FoodDao extends AbstractDao<Food, Long> {

    public static final String TABLENAME = "FOOD";

    /**
     * Properties of entity Food.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Area = new Property(1, String.class, "area", false, "AREA");
        public final static Property Img = new Property(2, String.class, "img", false, "IMG");
        public final static Property YwTotle = new Property(3, String.class, "ywTotle", false, "YW_TOTLE");
        public final static Property ViewSpotCountry = new Property(4, int.class, "viewSpotCountry", false, "VIEW_SPOT_COUNTRY");
        public final static Property FoodType = new Property(5, String.class, "foodType", false, "FOOD_TYPE");
        public final static Property GpsGaode = new Property(6, String.class, "gpsGaode", false, "GPS_GAODE");
        public final static Property ScoreTotle = new Property(7, String.class, "scoreTotle", false, "SCORE_TOTLE");
        public final static Property Gps = new Property(8, String.class, "gps", false, "GPS");
        public final static Property Score = new Property(9, float.class, "score", false, "SCORE");
        public final static Property GpsBaidu = new Property(10, String.class, "gpsBaidu", false, "GPS_BAIDU");
        public final static Property ViewSpotCity = new Property(11, int.class, "viewSpotCity", false, "VIEW_SPOT_CITY");
        public final static Property GpsGoogle = new Property(12, String.class, "gpsGoogle", false, "GPS_GOOGLE");
        public final static Property CityName = new Property(13, String.class, "cityName", false, "CITY_NAME");
        public final static Property AvgCostUnit = new Property(14, String.class, "avgCostUnit", false, "AVG_COST_UNIT");
        public final static Property CName = new Property(15, String.class, "cName", false, "C_NAME");
        public final static Property PercentPeople = new Property(16, String.class, "percentPeople", false, "PERCENT_PEOPLE");
        public final static Property Name = new Property(17, String.class, "name", false, "NAME");
        public final static Property Viewurl = new Property(18, String.class, "viewurl", false, "VIEWURL");
        public final static Property ShortDesc = new Property(19, String.class, "shortDesc", false, "SHORT_DESC");
        public final static Property Tag = new Property(20, String.class, "tag", false, "TAG");
        public final static Property AvgCost = new Property(21, String.class, "avgCost", false, "AVG_COST");
        public final static Property ScheduleId = new Property(22, String.class, "scheduleId", false, "SCHEDULE_ID");
    }


    public FoodDao(DaoConfig config) {
        super(config);
    }
    
    public FoodDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOOD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AREA\" TEXT," + // 1: area
                "\"IMG\" TEXT," + // 2: img
                "\"YW_TOTLE\" TEXT," + // 3: ywTotle
                "\"VIEW_SPOT_COUNTRY\" INTEGER NOT NULL ," + // 4: viewSpotCountry
                "\"FOOD_TYPE\" TEXT," + // 5: foodType
                "\"GPS_GAODE\" TEXT," + // 6: gpsGaode
                "\"SCORE_TOTLE\" TEXT," + // 7: scoreTotle
                "\"GPS\" TEXT," + // 8: gps
                "\"SCORE\" REAL NOT NULL ," + // 9: score
                "\"GPS_BAIDU\" TEXT," + // 10: gpsBaidu
                "\"VIEW_SPOT_CITY\" INTEGER NOT NULL ," + // 11: viewSpotCity
                "\"GPS_GOOGLE\" TEXT," + // 12: gpsGoogle
                "\"CITY_NAME\" TEXT," + // 13: cityName
                "\"AVG_COST_UNIT\" TEXT," + // 14: avgCostUnit
                "\"C_NAME\" TEXT," + // 15: cName
                "\"PERCENT_PEOPLE\" TEXT," + // 16: percentPeople
                "\"NAME\" TEXT," + // 17: name
                "\"VIEWURL\" TEXT," + // 18: viewurl
                "\"SHORT_DESC\" TEXT," + // 19: shortDesc
                "\"TAG\" TEXT," + // 20: tag
                "\"AVG_COST\" TEXT," + // 21: avgCost
                "\"SCHEDULE_ID\" TEXT);"); // 22: scheduleId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOOD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Food entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(2, area);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(3, img);
        }
 
        String ywTotle = entity.getYwTotle();
        if (ywTotle != null) {
            stmt.bindString(4, ywTotle);
        }
        stmt.bindLong(5, entity.getViewSpotCountry());
 
        String foodType = entity.getFoodType();
        if (foodType != null) {
            stmt.bindString(6, foodType);
        }
 
        String gpsGaode = entity.getGpsGaode();
        if (gpsGaode != null) {
            stmt.bindString(7, gpsGaode);
        }
 
        String scoreTotle = entity.getScoreTotle();
        if (scoreTotle != null) {
            stmt.bindString(8, scoreTotle);
        }
 
        String gps = entity.getGps();
        if (gps != null) {
            stmt.bindString(9, gps);
        }
        stmt.bindDouble(10, entity.getScore());
 
        String gpsBaidu = entity.getGpsBaidu();
        if (gpsBaidu != null) {
            stmt.bindString(11, gpsBaidu);
        }
        stmt.bindLong(12, entity.getViewSpotCity());
 
        String gpsGoogle = entity.getGpsGoogle();
        if (gpsGoogle != null) {
            stmt.bindString(13, gpsGoogle);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(14, cityName);
        }
 
        String avgCostUnit = entity.getAvgCostUnit();
        if (avgCostUnit != null) {
            stmt.bindString(15, avgCostUnit);
        }
 
        String cName = entity.getCName();
        if (cName != null) {
            stmt.bindString(16, cName);
        }
 
        String percentPeople = entity.getPercentPeople();
        if (percentPeople != null) {
            stmt.bindString(17, percentPeople);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(18, name);
        }
 
        String viewurl = entity.getViewurl();
        if (viewurl != null) {
            stmt.bindString(19, viewurl);
        }
 
        String shortDesc = entity.getShortDesc();
        if (shortDesc != null) {
            stmt.bindString(20, shortDesc);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(21, tag);
        }
 
        String avgCost = entity.getAvgCost();
        if (avgCost != null) {
            stmt.bindString(22, avgCost);
        }
 
        String scheduleId = entity.getScheduleId();
        if (scheduleId != null) {
            stmt.bindString(23, scheduleId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Food entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(2, area);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(3, img);
        }
 
        String ywTotle = entity.getYwTotle();
        if (ywTotle != null) {
            stmt.bindString(4, ywTotle);
        }
        stmt.bindLong(5, entity.getViewSpotCountry());
 
        String foodType = entity.getFoodType();
        if (foodType != null) {
            stmt.bindString(6, foodType);
        }
 
        String gpsGaode = entity.getGpsGaode();
        if (gpsGaode != null) {
            stmt.bindString(7, gpsGaode);
        }
 
        String scoreTotle = entity.getScoreTotle();
        if (scoreTotle != null) {
            stmt.bindString(8, scoreTotle);
        }
 
        String gps = entity.getGps();
        if (gps != null) {
            stmt.bindString(9, gps);
        }
        stmt.bindDouble(10, entity.getScore());
 
        String gpsBaidu = entity.getGpsBaidu();
        if (gpsBaidu != null) {
            stmt.bindString(11, gpsBaidu);
        }
        stmt.bindLong(12, entity.getViewSpotCity());
 
        String gpsGoogle = entity.getGpsGoogle();
        if (gpsGoogle != null) {
            stmt.bindString(13, gpsGoogle);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(14, cityName);
        }
 
        String avgCostUnit = entity.getAvgCostUnit();
        if (avgCostUnit != null) {
            stmt.bindString(15, avgCostUnit);
        }
 
        String cName = entity.getCName();
        if (cName != null) {
            stmt.bindString(16, cName);
        }
 
        String percentPeople = entity.getPercentPeople();
        if (percentPeople != null) {
            stmt.bindString(17, percentPeople);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(18, name);
        }
 
        String viewurl = entity.getViewurl();
        if (viewurl != null) {
            stmt.bindString(19, viewurl);
        }
 
        String shortDesc = entity.getShortDesc();
        if (shortDesc != null) {
            stmt.bindString(20, shortDesc);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(21, tag);
        }
 
        String avgCost = entity.getAvgCost();
        if (avgCost != null) {
            stmt.bindString(22, avgCost);
        }
 
        String scheduleId = entity.getScheduleId();
        if (scheduleId != null) {
            stmt.bindString(23, scheduleId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Food readEntity(Cursor cursor, int offset) {
        Food entity = new Food( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // area
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // img
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ywTotle
            cursor.getInt(offset + 4), // viewSpotCountry
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // foodType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // gpsGaode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // scoreTotle
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // gps
            cursor.getFloat(offset + 9), // score
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // gpsBaidu
            cursor.getInt(offset + 11), // viewSpotCity
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // gpsGoogle
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // cityName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // avgCostUnit
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // cName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // percentPeople
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // name
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // viewurl
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // shortDesc
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // tag
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // avgCost
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // scheduleId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Food entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArea(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setYwTotle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setViewSpotCountry(cursor.getInt(offset + 4));
        entity.setFoodType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGpsGaode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setScoreTotle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGps(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setScore(cursor.getFloat(offset + 9));
        entity.setGpsBaidu(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setViewSpotCity(cursor.getInt(offset + 11));
        entity.setGpsGoogle(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCityName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAvgCostUnit(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPercentPeople(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setViewurl(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setShortDesc(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTag(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAvgCost(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setScheduleId(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Food entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Food entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Food entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
