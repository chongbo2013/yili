package com.lots.travel.store.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIEW_CITY".
*/
public class ViewCityDao extends AbstractDao<ViewCity, Long> {

    public static final String TABLENAME = "VIEW_CITY";

    /**
     * Properties of entity ViewCity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pp = new Property(1, int.class, "pp", false, "PP");
        public final static Property Country = new Property(2, String.class, "country", false, "COUNTRY");
        public final static Property CName = new Property(3, String.class, "cName", false, "C_NAME");
        public final static Property ViewType = new Property(4, int.class, "viewType", false, "VIEW_TYPE");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Tag = new Property(6, String.class, "tag", false, "TAG");
        public final static Property ViewImg = new Property(7, String.class, "viewImg", false, "VIEW_IMG");
        public final static Property VisaType = new Property(8, String.class, "visaType", false, "VISA_TYPE");
    }


    public ViewCityDao(DaoConfig config) {
        super(config);
    }
    
    public ViewCityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIEW_CITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PP\" INTEGER NOT NULL ," + // 1: pp
                "\"COUNTRY\" TEXT," + // 2: country
                "\"C_NAME\" TEXT," + // 3: cName
                "\"VIEW_TYPE\" INTEGER NOT NULL ," + // 4: viewType
                "\"NAME\" TEXT," + // 5: name
                "\"TAG\" TEXT," + // 6: tag
                "\"VIEW_IMG\" TEXT," + // 7: viewImg
                "\"VISA_TYPE\" TEXT);"); // 8: visaType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIEW_CITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ViewCity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPp());
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(3, country);
        }
 
        String cName = entity.getCName();
        if (cName != null) {
            stmt.bindString(4, cName);
        }
        stmt.bindLong(5, entity.getViewType());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(7, tag);
        }
 
        String viewImg = entity.getViewImg();
        if (viewImg != null) {
            stmt.bindString(8, viewImg);
        }
 
        String visaType = entity.getVisaType();
        if (visaType != null) {
            stmt.bindString(9, visaType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ViewCity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPp());
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(3, country);
        }
 
        String cName = entity.getCName();
        if (cName != null) {
            stmt.bindString(4, cName);
        }
        stmt.bindLong(5, entity.getViewType());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(7, tag);
        }
 
        String viewImg = entity.getViewImg();
        if (viewImg != null) {
            stmt.bindString(8, viewImg);
        }
 
        String visaType = entity.getVisaType();
        if (visaType != null) {
            stmt.bindString(9, visaType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ViewCity readEntity(Cursor cursor, int offset) {
        ViewCity entity = new ViewCity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // pp
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // country
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cName
            cursor.getInt(offset + 4), // viewType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // viewImg
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // visaType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ViewCity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPp(cursor.getInt(offset + 1));
        entity.setCountry(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setViewType(cursor.getInt(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setViewImg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVisaType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ViewCity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ViewCity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ViewCity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
